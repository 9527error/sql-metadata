# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version:
        - "3.8"
        - "3.9"

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    # https://github.com/actions/cache/blob/main/examples.md#using-pip-to-get-cache-location
    - name: Get pip cache dir
      id: pip-cache
      run: |
        echo "::set-output name=dir::$(pip cache dir)"
    - name: pip cache
      uses: actions/cache@v2
      with:
        path: ${{ steps.pip-cache.outputs.dir }}
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/setup.py') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    # https://python-poetry.org/docs/#installation
    - name: Install and set up poetry
      env:
        POETRY_VERSION: 1.1.4
        POETRY_NO_INTERACTION: 1
      run: |
        curl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python
        source $HOME/.poetry/env

        poetry config virtualenvs.create true
        poetry config virtualenvs.in-project true
        
        poetry --version
        poetry config --list

    - name: Load cached venv
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: venv-${{ matrix.python-version }}-

    - name: Install dependencies with poetry
      run: |
        poetry install
        poetry run pip list

    - name: Lint with pylint
      run: |
        pylint sql_metadata.py

    - name: Test with pytest
      run: |
        pytest -vv
